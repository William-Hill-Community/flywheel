plugins {
  id 'com.jfrog.bintray' version '1.7.3'
}
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'

allprojects {
  apply plugin: 'java'
  apply plugin: 'jacoco'

  repositories {
    jcenter()
  }

  jacoco {
    toolVersion = '0.7.9'
  }

  jacocoTestReport {
    additionalSourceDirs = files(sourceSets.main.allSource.srcDirs)
    sourceDirectories = files(sourceSets.main.allSource.srcDirs)
    classDirectories = files(sourceSets.main.output)
    reports {
      html.enabled = true
      xml.enabled = true
      csv.enabled = false
    }
  }
}

subprojects {
  dependencies {
    testCompile 'junit:junit:4.12'
  }
}

task jacocoRootReport(type: JacocoReport) {
  dependsOn = allprojects.test
  additionalSourceDirs = files(allprojects.sourceSets.main.allSource.srcDirs)
  sourceDirectories = files(allprojects.sourceSets.main.allSource.srcDirs)
  classDirectories = files(allprojects.sourceSets.main.output)
  executionData = files(allprojects.jacocoTestReport.executionData)
  reports {
    html.enabled = true
    xml.enabled = false
    csv.enabled = false
  }
  onlyIf = {
    true
  }
  doFirst {
    executionData = files(executionData.findAll {
      it.exists()
    })
  }
}

def versionFile(extension) {
  return new File(sourceSets.main.resources.srcDirs[0].path + '/' + project.name + extension)
}

def getVersion(extension) {
  def versionFile = versionFile extension
  if (! versionFile.exists()) return '0'
  def reader = new BufferedReader(new FileReader(versionFile))
  def version = reader.readLine().trim()
  reader.close()
  return version
}

def setVersion(extension, version) {
  def versionFile = versionFile extension
  def writer = new BufferedWriter(new FileWriter(versionFile))
  writer.write(String.valueOf(version))
  writer.close()
}

def packageVersion = getVersion '.version'
def packageBuild = getVersion '.build'

task getBuild() {
  doLast {
    println "At ${getVersion('.version')}_${getVersion('.build')}"
  }
}

task setBuild() {
  doLast {
    def timestamp = new java.text.SimpleDateFormat('yyMMddHHmm').format(new Date())
    setVersion('.build', timestamp)
  }
}

group = 'au.com.williamhill.flywheel'
version = packageVersion

def packageName = 'flywheel-core'

repositories {
  jcenter()
}

dependencies {
  compile 'org.slf4j:slf4j-api:1.7.25'
  compile 'com.obsidiandynamics.indigo:indigo-core:0.9.4'
  compile 'com.obsidiandynamics.yconf:yconf-core:0.2.0'
  compile 'com.obsidiandynamics.yconf:yconf-juel:0.2.0'
  compile 'com.obsidiandynamics.yconf:yconf-snakeyaml:0.2.0'
  compile 'com.google.code.gson:gson:2.8.0'
  compile 'org.danilopianini:gson-extras:0.2.1'
  compile 'org.eclipse.jetty.websocket:websocket-server:9.4.5.v20170502'
  compile 'org.eclipse.jetty.websocket:websocket-client:9.4.5.v20170502'
  compile 'io.undertow:undertow-core:1.4.18.Final'
  compile 'io.undertow:undertow-websockets-jsr:1.4.18.Final'
  compile 'io.netty:netty-all:4.1.11.Final'
  
  testCompile 'com.obsidiandynamics.indigo:indigo-assurance:0.9.4'
  testCompile 'org.apache.httpcomponents:httpclient:4.5.3'
  testRuntime 'org.slf4j:slf4j-log4j12:1.7.25'
  testRuntime 'log4j:log4j:1.2.17'
}

def envUser = 'BINTRAY_USER'
def envKey = 'BINTRAY_KEY'
task bintrayCredentialsCheck {
  doLast {
    if (System.getenv(envUser) == null) {
      throw new GradleException("No Bintray username specified; set with 'export ${envUser}=<username>'")
    }
    if (System.getenv(envKey) == null) {
      throw new GradleException("No Bintray key specified; set with 'export ${envKey}=<key>'")
    }
  }
}

def packageDesc = 'A simple, fast, WebSocket-based IoT message broker'
bintray {
  user = System.getenv(envUser)
  key = System.getenv(envKey)
  publications = ['mavenJava']
  pkg {
    repo = 'flywheel'
    name = packageName
    userOrg = 'william-hill-community'
    desc = packageDesc
    websiteUrl = 'https://github.com/william-hill-community/flywheel'
    licenses = ['BSD New']
    vcsUrl = 'https://github.com/william-hill-community/flywheel.git'
    publicDownloadNumbers = true
    githubRepo = 'william-hill-community/flywheel'
    override = true
    publish = false
    version {
      name = packageVersion
      desc = packageDesc
      released  = new Date()
      vcsTag = packageVersion
    }
  }
}

// invoke this task when ready to publish to Bintray
bintrayUpload {
  dependsOn bintrayCredentialsCheck
}

processResources {
  dependsOn setBuild
}

jar {
  baseName packageName
  finalizedBy jacocoRootReport
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  baseName packageName
  classifier = 'javadoc'
  from "$buildDir/docs/javadoc"
}
 
task sourcesJar(type: Jar) {
  baseName packageName
  from sourceSets.main.allSource
  classifier = 'sources'
}
 
artifacts {
  archives jar
  archives javadocJar
  archives sourcesJar
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      groupId group
      artifactId packageName
      version packageVersion
      from components.java
      artifact sourcesJar
      artifact javadocJar
    }
  }
  repositories {
    maven {
      url "${project(':').projectDir}/../repo"
    }
  }
}

task testJar(type: Jar) {
  dependsOn configurations.compile
  dependsOn configurations.runtime
  dependsOn configurations.testCompile
  dependsOn configurations.testRuntime
  dependsOn jar
  from sourceSets.main.output
  from sourceSets.test.output
  from { // bundle all dependencies
    configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    configurations.runtime.collect { it.isDirectory() ? it : zipTree(it) }
    configurations.testCompile.collect { it.isDirectory() ? it : zipTree(it) }
    configurations.testRuntime.collect { it.isDirectory() ? it : zipTree(it) }
  }   
  baseName packageName + '-test'
}

def perfJvmArgs = '-server -XX:-MaxFDLimit -XX:+TieredCompilation -XX:+UseNUMA -XX:+UseCondCardMark -XX:-UseBiasedLocking -Xms1G -Xmx2G -Xss1M -XX:+UseParallelGC'

task fanOutBench(type: JavaExec) {
  classpath = sourceSets.main.runtimeClasspath + sourceSets.test.runtimeClasspath
  jvmArgs = Arrays.asList perfJvmArgs.split(' ')
  main = 'au.com.williamhill.flywheel.socketx.FanOutBenchmark'
}

task doubleRigBench(type: JavaExec) {
  classpath = sourceSets.main.runtimeClasspath + sourceSets.test.runtimeClasspath
  jvmArgs = Arrays.asList perfJvmArgs.split(' ')
  main = 'au.com.williamhill.flywheel.rig.DoubleRigBenchmark'
}

task tripleRigBench(type: JavaExec) {
  classpath = sourceSets.main.runtimeClasspath + sourceSets.test.runtimeClasspath
  jvmArgs = Arrays.asList perfJvmArgs.split(' ')
  main = 'au.com.williamhill.flywheel.rig.TripleRigBenchmark'
}

task edgeRigBench(type: JavaExec) {
  systemProperties = System.properties
  classpath = sourceSets.main.runtimeClasspath + sourceSets.test.runtimeClasspath
  jvmArgs = Arrays.asList perfJvmArgs.split(' ')
  main = 'au.com.williamhill.flywheel.rig.EdgeRigBenchmark'
}

task remoteRigBench(type: JavaExec) {
  systemProperties = System.properties
  classpath = sourceSets.main.runtimeClasspath + sourceSets.test.runtimeClasspath
  jvmArgs = Arrays.asList perfJvmArgs.split(' ')
  main = 'au.com.williamhill.flywheel.rig.RemoteRigBenchmark'
}

task injectorRigBench(type: JavaExec) {
  systemProperties = System.properties
  classpath = sourceSets.main.runtimeClasspath + sourceSets.test.runtimeClasspath
  jvmArgs = Arrays.asList perfJvmArgs.split(' ')
  main = 'au.com.williamhill.flywheel.rig.InjectorRigBenchmark'
}
