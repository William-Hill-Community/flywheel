apply plugin: 'java'
apply plugin: 'jacoco'

group = project(':').group
version = project(':').version

def packageName = 'flywheel-standalone'

repositories {
  jcenter()
}

dependencies {
  compile project(':')
  compile project(':flywheel-plugin-beacon')
  compile project(':flywheel-plugin-toplog')
  compile 'de.odysseus.juel:juel-api:2.2.7'
  compile 'de.odysseus.juel:juel-impl:2.2.7'
  
  runtime project(':flywheel-logging-splunk')
  
  testCompile 'com.obsidiandynamics.indigo:indigo-assurance:0.9.4'
}

jacoco {
  toolVersion = "0.7.9"
}

jacocoTestReport {
  dependsOn test
  reports {
    xml.enabled false
    html.enabled true
  }
}

jar {
  dependsOn configurations.compile
  dependsOn configurations.runtime
  from sourceSets.main.output
  from { // bundle all dependencies
    configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    configurations.runtime.collect { it.isDirectory() ? it : zipTree(it) }
  }   
  baseName packageName + '-full'
  finalizedBy jacocoTestReport
}

task dockerBuild(type: Exec) {
  dependsOn jar
  def dockerRepo = System.getProperty('flywheel.standalone.repo', 'flywheel')
  commandLine 'sh', '-c', "docker build -t $dockerRepo ."
  doLast {
    println "Built image $dockerRepo"
  }
}

def perfJvmArgs = '-server -XX:-MaxFDLimit -XX:+TieredCompilation -XX:+UseNUMA -XX:+UseCondCardMark -XX:-UseBiasedLocking -Xms1G -Xmx4G -Xss1M -XX:+UseParallelGC'

task beaconEdge(type: JavaExec) {
  systemProperties = System.properties
  classpath = sourceSets.main.runtimeClasspath + sourceSets.test.runtimeClasspath
  main = 'au.com.williamhill.flywheel.beacon.RunBeaconEdge'
}